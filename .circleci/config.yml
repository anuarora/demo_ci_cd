# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0
commands:
  print_pipeline_id:
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID
jobs:
#  print_hello:
#    docker:
#      - image: circleci/node:13.8.0
#    steps:
#      - run: echo hello
#  print_world:
#    docker:
#      - image: circleci/node:13.8.0
#    steps:
#      - run: echo world
  save_hello_world_output:
    <<: *defaults
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_output_file:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: "echo an env value"
          command: |
            echo $firstname
  return_non_zero:
    <<: *defaults
    steps:
      - run: return 1
      - run:
         name: on error
         command: echo "Hello Error!"
         when: on_fail
  test_command:
    <<: *defaults
    steps:
      - print_pipeline_id
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name my-stack
  ansible_playbook:
    docker:
      - image: python:3.7-alpine3.11


# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - ansible_playbook
#      - create_infrastructure
#      - save_hello_world_output
#      - build
#      - test_command
#      - return_non_zero
#      - print_output_file:
#          requires:
#            - save_hello_world_output
